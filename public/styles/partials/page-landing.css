

#page-landing{
    background: var(--color-primary);
    
}

#page-landing, 
#container{
    color: var(--color-title-in-primary);
}

.logo-container img{
    height: 10rem;
}

.logo-container{
    text-align: center; 
    margin-bottom: 3.2rem;
}

.logo-container h2{
    font-weight: 500;
    font-size: 3.6rem;
    line-height: 4.6rem;
    margin-top: 0.8;
    color: var(--color-text-in-primary);
}

.hero-image{
    width: 100%;
}

.buttons-container{
    display: flex;
    justify-content: center;
    margin: 3.2rem 0;
}

.buttons-container a{
    width: 30rem;
    height: 10.4rem;
    border-radius: 0.8rem;
    margin-right: 1.6rem;
    font: bold 2.4rem Archivo;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    color: var(--color-button-text);
    transition: background 0.3s; /*transition vai ser aplicada ao background*/
}

.buttons-container a img{
    width: 4.2rem;
    margin-right: 2.4rem;
}

.buttons-container a.study{ /*Dentro do buttons-container pega a tag "a" que tem a classe (.study)*/
    background: var(--color-primary-lighter);
}

.buttons-container a.study:hover{
    background: var(--color-primary-light);
}


.buttons-container a.give-classes{ /*Dentro do buttons-container pega a tag "a" que tem a classe (.give-classes)*/
    background: var(--color-secondary);
    margin-right: 0; /*tirar a margim da direita colocada no .buttons-container a. Para deixar sem margim a mais e centralizar de forma correta*/
}

.buttons-container a.give-classes:hover{
    background: var(--color-secondary-dark);
}

.total-conections{
    display: flex;
    /*flex-wrap: wrap;*/
    align-items: center;
    justify-content: center;
    font-size: 1.8rem;
}

.total-conections img{
    margin-left: 0.8rem;
}

@media (max-width: 1100px){ /*Se o meu disposivo tiver uma largura maxima de 699px(Ou seja se ele for até 699px) eu vou utilizar na minha raiz(root) esse tamanho de fonte*/
    :root{
        font-size: 40%; /*Modificar as medidas rem*/
    }
}

@media (min-width: 1100px){
    #page-landing #container{
        max-width: 1100px;
        display: grid; /*Quando eu uso o grid eu estou dividindo a minha tela em colunas e linhas. e os comandos a baixo vão fazer isso*/
        grid-template-columns: 2fr 1fr 2fr; /*Definindo as colunas em frações */
        grid-template-rows: 350px 1fr; /*Definindo uma linha fixa de 350px e pegando o resto em uma fração(que vai ser dinamico dependendo do conteudo*/

        grid-template-areas: /*No grid eu poço definir posições estrategicas do meu conteudo para colocar de acordo com as divisões acima*/
        "proffy image image"
        "button button texting"; /*; para fechar grid-template-areas*/
        gap: 87px; /*esyou dando um gap(vão) entre as colunas e linhas. Essa propriedade pode ser usado com valores diferentes nas colunas e nas linhas basta fazer: column-gap: xx ou row-gap: xx*/
    }

    .logo-container{
        grid-area: proffy;
        text-align: initial;
        align-self: center;
        margin: 0;
    }

    .logo-container img{
        height: 127px /*Se deixar essa definição assim, sem colocar o text-self no logo-container a imagem do logo não vai respeitar o meu grid e vai ficar gigante usando os 1100px de width*/
        
    }

    .hero-image{
        grid-area:image;
        height: 350px;
    }

    .buttons-container{
        grid-area: button;
        justify-content: flex-start; /*Estou colocando os botões no inicio com o justify-content pq sobrescrever outro justify que está como center*/
        margin: 0; /*Tirando as margins do botão colocadas no mobile-first*/
    }

    .total-conections{
        grid-area: texting;
        justify-self: and; /*justificando o elemento(ele mesmo =self) do total-conections no proprio grid*/
        font-size: 1.2rem;
    }
}